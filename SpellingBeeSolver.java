/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.solver;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author natew
 */
public class SpellingBeeSolver extends javax.swing.JFrame {

    /**
     * Creates new form SpellingBeeSolver
     */
    public SpellingBeeSolver() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("SOLVE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Input a Seven Letter Anagram, with the required letter first");
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("NYT Spelling Bee Solver Version 1.0 December 12/31/23");

        jLabel2.setText("David Eyal de2425@columbia.edu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       System.exit(0);

    }//GEN-LAST:event_jButton1ActionPerformed
    public static String printAnagrams(Map<String,List<String>> map, String args, char x){
            List<String> f = new ArrayList<>();
            char[] original = args.toCharArray();
            List<char[]> combos = new ArrayList<char[]>();
            //tries words with up to three duplicates
            char[] original2 = new char[original.length*3];
            int i = 0;
            int j = 0;
            for(int k = 0;k<original.length;k++){
                for(i = 0; i< 3;i++){
                    original2[j] = original[k];
                    j++;
                }
            }
            String s;
            for(i = 4; i<11;i++){
                combos.addAll(combinations(original2,i,x));
                for(j = 0; j<combos.size();j++){
                    try{
                        s = new String(combos.get(j));
                        f.addAll(map.get(String.copyValueOf(insertionSort(s))));
                    }
                    catch (NullPointerException e){
                }
                }
           }
            f = removeDuplicate(f);
            Iterator<String> b = f.iterator();
            //instantiates a String array of the list size
            String[] anagrams = new String[1000];
            for(i = 0; i<anagrams.length;i++){
                anagrams[i] = "";
            }
            //Inserts all the anagrams into the array
            int count = 0;
            while(b.hasNext()){
                String z = b.next();
                    anagrams[count] = z;
            count++;}
            //Sorts the anagrams and prints them out
            anagrams = insertionSort(anagrams);
            s = "";
            for(i = 0; i<anagrams.length;i++){
                if(!anagrams[i].isEmpty()){
                    s = s + " " + anagrams[i];
                 
            }}
            return s;
           
    }
    public static List<String> removeDuplicate(List<String> f){
        Set<String> dups = new LinkedHashSet<>();
        dups.addAll(f);
        f.clear();
        f.addAll(dups);
        return f;
    }
    public static List<char[]> removeDuplicates(List<char[]> f){
        Set<char[]> dups = new LinkedHashSet<>();
        dups.addAll(f);
        f.clear();
        f.addAll(dups);
        return f;
    }
    public static List<char[]> combinations(char[] original, int length, char x){
        List<char[]> combinations = new ArrayList<>();
        int[] indices = new int[length];
        if(length<=original.length) {
            for (int i = 0; (indices[i] = i) < length - 1; i++);
            combinations.add(kSubset(original, indices, x));
            while (true) {
                int i;
                for (i = length - 1; i >= 0 && indices[i] == original.length - length + i; i--) ;
                if (i < 0) {
                    break;
                }
                indices[i]++;
                for(++i;i<length;i++){
                    indices[i] = indices[i-1] + 1;
                }
                combinations.add(kSubset(original,indices, x));
            }
        }
        combinations = removeDuplicates(combinations);
        return combinations;
    }
    public static char[] kSubset(char[] total, int[] indices, char x){
        char[] result = new char[indices.length];
        boolean xFound = false;
        for (int i = 0; i<indices.length;i++){
            result[i] = total[indices[i]];
            if(total[indices[i]]==x){
                xFound=true;
            }
        }
        if (xFound == true){
            return result;
        }
        else return null;
    }
    /**
     * Takes in an empty map of any data structure and the original file and builds a map
     * @param map
     * @param file
     * @return Map of all words in the file
     * @throws IOException
     */
    public static Map<String, List<String>> getMap(Map<String, List<String>> map, String file) throws IOException {
        BufferedReader dictionary = null;
        // Found documentation for BufferedReader
        // https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html
        // Tries opening the file, catches an exception to print the error message
        try {
            dictionary  = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException e) {
            System.exit(1);
        }
        while(dictionary.ready()){
            //Reads a line, sorts it, and checks if it is in the AVL Tree
            //If its anagram is there, it appends it to the linked list
            //If not, it creates a linked list and inserts the anagram key and the linked list into the AVL Tree
            try{
                String x = dictionary.readLine();
                String y = String.copyValueOf(insertionSort(x));
                if(map.get(y) != null){
                    map.get(y).add(x);
                }
                else{
                    List<String> z = new LinkedList<String>();
                    z.add(x);
                    map.put(y,z);
                }}
            catch (IOException e){
                  System.exit(1);
            }}
        return map;}
    /**
     * Insertion sort method to sort a word in alphabetical order
     * @param word
     * @return Sorted char array
     */
    public static char[] insertionSort(String word){
        word = word.toLowerCase();
        char[] sorted = word.toCharArray();
        for (int i = 1; i<sorted.length; i++){
            int k, current = (int) sorted[i];
            for(k = i-1; k>=0 && (int)sorted[k] > current; k--){
                sorted[k+1] = sorted[k];}
            sorted[k+1] = (char) current;}
        return sorted;}
    /**
     * Takes in an unsorted list of anagrams and sorts them using insertionSort
     * @param anagrams
     * @return Sorted list of anagrams
     */
    public static String[] insertionSort(String[] anagrams){
        for (int i = 1; i<anagrams.length;i++){
            int k;
            String current = anagrams[i];
            for (k = i-1;k>=0 && anagrams[k].compareTo(current) > 0; k--){
                anagrams[k+1] = anagrams[k];}
            anagrams[k+1] = current;}
        return anagrams;}
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Map<String,List<String>> map = new HashMap<>();
            map = getMap(map,"dictionary.txt");
            String s = (String) jTextField1.getText();
            char c = s.charAt(0);
            s = printAnagrams(map,s,c);
            jTextArea1.setText(s);    
        } catch (IOException ex) {
            Logger.getLogger(SpellingBeeSolver.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpellingBeeSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpellingBeeSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpellingBeeSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpellingBeeSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpellingBeeSolver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
